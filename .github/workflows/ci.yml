name: LeadLink CI/CD Pipeline

on:
  push:
    branches: [ main, development, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.40.0'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      cache-key: ${{ steps.cache-key.outputs.value }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT
      
      - name: Validate Firebase configuration
        run: |
          if [ -f "firebase.json" ]; then
            echo "✅ Firebase configuration found"
          else
            echo "❌ Firebase configuration missing"
            exit 1
          fi

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: tsc --noEmit
        
      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"
  
  security-scan:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run Firebase security rules tests
        if: hashFiles('firestore.rules') != ''
        run: |
          npm install -g firebase-tools
          firebase emulators:exec --only firestore,storage --project $FIREBASE_PROJECT_ID \
            "npm run test:firestore" -- --token=${{ secrets.FIREBASE_TOKEN }}
  
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Setup Firebase emulators
        run: |
          npm install -g firebase-tools
          firebase setup:emulators:firestore
          firebase setup:emulators:storage
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: coverage/
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Create environment file
        run: |
          touch .env.local
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.local
          echo "NEXT_PUBLIC_ENVIRONMENT=${{ needs.setup.outputs.environment }}" >> .env.local
      
      - name: Build application
        run: npm run build
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: build-${{ github.sha }}
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next
            public
            package.json
            next.config.js
            firebase.json
            .env.local
  
  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: build-${{ github.sha }}
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run Playwright E2E tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
  
  visual-testing:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: build-${{ github.sha }}
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run visual tests
        run: npm run test:visual
      
      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: visual-test-results
          path: visual-test-results/
  
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: build-${{ github.sha }}
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-reports/
  
  multi-tenant-validation:
    name: Multi-Tenant Isolation Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: .next
          key: build-${{ github.sha }}
      
      - name: Setup Firebase emulators
        run: |
          npm install -g firebase-tools
          firebase setup:emulators:firestore
          firebase setup:emulators:storage
          firebase setup:emulators:auth
      
      - name: Run multi-tenant validation tests
        run: npm run validate:multitenant
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, multi-tenant-validation]
    if: (github.ref == 'refs/heads/development' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment:
      name: staging
      url: https://staging.leadlink-crm.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      
      - name: Deploy Firebase functions
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project $FIREBASE_PROJECT_ID
      
      - name: Deploy Firebase hosting
        run: |
          firebase target:apply hosting staging leadlink-staging
          firebase deploy --only hosting:staging --project $FIREBASE_PROJECT_ID
      
      - name: Update deployment record
        if: success()
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{"environment": "staging", "status": "success", "version": "${{ github.sha }}", "deployedBy": "${{ github.actor }}"}'
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, multi-tenant-validation, performance-testing, visual-testing]
    if: (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production
      url: https://leadlink-crm.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      
      - name: Deploy Firebase functions
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project $FIREBASE_PROJECT_ID
      
      - name: Deploy Firebase hosting
        run: |
          firebase target:apply hosting production leadlink-production
          firebase deploy --only hosting:production --project $FIREBASE_PROJECT_ID
      
      - name: Create release tag
        run: |
          VERSION=$(date +'v%Y.%m.%d-%H%M')
          git tag $VERSION
          git push origin $VERSION
      
      - name: Update deployment record
        if: success()
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{"environment": "production", "status": "success", "version": "${{ github.sha }}", "deployedBy": "${{ github.actor }}"}'
  
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Set status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
          else
            echo "deployment_status=succeeded" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Deployment ${{ steps.status.outputs.deployment_status }} for LeadLink CRM",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Deployment ${{ steps.status.outputs.deployment_status }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: LeadLink CRM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment*: ${{ needs.setup.outputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by*: ${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 